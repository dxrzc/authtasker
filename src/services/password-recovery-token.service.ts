import { JwtService } from './jwt.service';
import { ConfigService } from './config.service';
import { LoggerService } from './logger.service';
import { JwtBlackListService } from './jwt-blacklist.service';
import { tokenPurposes } from '@root/common/constants/token-purposes.constants';
import { calculateTokenTTL } from '@logic/token/calculate-token-ttl';
import { JwtTypes } from '@root/enums/jwt-types.enum';
import { HttpError } from '@root/common/errors/classes/http-error.class';
import { authErrors } from '@root/common/errors/messages/auth.error.messages';

export class PasswordRecoveryTokenService {
    constructor(
        private readonly configService: ConfigService,
        private readonly jwtService: JwtService,
        private readonly jwtBlacklistService: JwtBlackListService,
        private readonly loggerService: LoggerService,
    ) {}

    generate(email: string) {
        const expTime = this.configService.JWT_PASSWORD_RECOVERY_EXP_TIME;
        const { token, jti } = this.jwtService.generate(expTime, {
            email,
            purpose: tokenPurposes.PASSWORD_RECOVERY,
        });
        this.loggerService.info(`Password recovery token ${jti} generated, expires at ${expTime}`);
        return token;
    }

    private async blacklist(jti: string, tokenExp: number): Promise<void> {
        const remainingTokenTTL = calculateTokenTTL(tokenExp);
        if (remainingTokenTTL > 0) {
            this.loggerService.info(`Password recovery token "${jti}" blacklisted`);
            await this.jwtBlacklistService.blacklist(JwtTypes.passwordRecovery, jti, remainingTokenTTL);
        } else {
            this.loggerService.info(`Password recovery token "${jti}" already expired, skipping blacklisting`)
        }
    }

    async consume(token: string): Promise<string> {
        // token was generated by this server
        const payload = this.jwtService.verify<{ email: string }>(token);
        if (!payload) {
            this.loggerService.error('Invalid password recovery token, not generated by this server');
            throw HttpError.badRequest(authErrors.INVALID_TOKEN);
        }
        // email must be in token
        const emailInToken = payload.email;
        if (!emailInToken) {
            this.loggerService.error('Email not in password recovery token');
            throw HttpError.badRequest(authErrors.INVALID_TOKEN);
        }
        // correct purpose
        const validPurpose = payload.purpose === tokenPurposes.PASSWORD_RECOVERY;
        if (!validPurpose) {
            this.loggerService.error(`Invalid token purpose: ${payload.purpose}`);
            throw HttpError.badRequest(authErrors.INVALID_TOKEN);
        }
        // token is not blacklisted
        const tokenIsBlacklisted = await this.jwtBlacklistService.tokenInBlacklist(JwtTypes.passwordRecovery, payload.jti)
        if (tokenIsBlacklisted) {
            this.loggerService.error('Provided password recovery token is blacklisted');
            throw HttpError.badRequest(authErrors.INVALID_TOKEN);
        }
        // single-use token
        await this.blacklist(payload.jti, payload.exp!);
        return payload.email;
    }
}